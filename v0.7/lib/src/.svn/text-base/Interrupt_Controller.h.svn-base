//--------------------------------------------------------------                //%
// Important:  The template for this file was generated                         //%
//  automatically and can only be re-generated if rules                         //%
//  are followed when editing:                                                  //%
// 1. Do not modify any line containing //%                                     //%
// 2. Only insert your lines of code between 2 lines                            //%
//    containing "//% user begin" and "//% user end"                            //%
//                                                                              //%
// :generate:date: Tue Jan 14 2014 16:57:28                                     //%
// :generate:version: 2010.1.0-dev                                              //%
//--------------------------------------------------------------                //%
                                                                                //%
#ifndef __INTERRUPT_CONTROLLER_H__                                              //%
#define __INTERRUPT_CONTROLLER_H__                                              //%
                                                                                //%USERBEGIN MODEL_DEBUG_ENABLE
#if defined(DEBUG) || defined(DBG_SCP)
# define DBG_SCP_INTERRUPT_CONTROLLER
#endif
                                                                                //%USEREND MODEL_DEBUG_ENABLE
                                                                                //%
#include <scml2.h>                                                              //%
#include <systemc>                                                              //%
#include "scmlinc/scml_command_processor.h"                                     //%
                                                                                //%USERBEGIN HEADER_H
// TODO: Insert your includes, declarations, etc. here.
                                                                                //%USEREND HEADER_H
                                                                                //%
//------------------------                                                      //%
// Module Interface                                                             //%
//------------------------                                                      //%
                                                                                //%
template < unsigned int NUM_PORT=4 >                                            //%
class Interrupt_Controller :                                                    //%
	public sc_core::sc_module                                               //%
                                                                                //%USERBEGIN INHERITANCE
    // TODO: Specify class inheritance here. Start each line with a , character
                                                                                //%
{                                                                               //%
public:                                                                         //%
	// constructor                                                          //%
	Interrupt_Controller( const sc_core::sc_module_name & n ) ;             //%
	SC_HAS_PROCESS( Interrupt_Controller );                                 //%
	// destructor                                                           //%
	virtual ~Interrupt_Controller();                                        //%
private:                                                                        //%
	// disable default and copy constructors by making them private         //%
	Interrupt_Controller() ;                                                //%
	Interrupt_Controller( const Interrupt_Controller& ) ;                   //%
	Interrupt_Controller & operator= ( const Interrupt_Controller& ) ;      //%
public:                                                                         //%
	// method called at end of elaboration of design -- for initialization  //%
	virtual void end_of_elaboration();                                      //%
	// initialization methods for ports & registers                         //%
	virtual void initPorts();                                               //%
	virtual void initRegisters();                                           //%
	// method to handle interactive commands -- for dynamic instrumentation //%
	virtual std::string commandProcessor(const std::vector<std::string>& cmd);//%
public:                                                                         //%
	// Port declarations                                                    //%
	sc_core::sc_out< bool > nIRQ;                                           //%
	sc_core::sc_out< bool > nFIQ;                                           //%
	sc_core::sc_in< bool > INTR[NUM_PORT];                                  //%
	tlm::tlm_target_socket< 32 > memory;                                    //%
                                                                                //%
protected:                                                                      //%
                                                                                //%
	// Memory declarations                                                  //%
	scml2::memory< unsigned int > REG;                                      //%
	  scml2::reg< unsigned int > REG_INT_MASK;                              //%
	  scml2::reg< unsigned int > REG_INT_TYPE;                              //%
	  scml2::reg< unsigned int > REG_INT_SOURCE;                            //%
                                                                                //%
	scml2::tlm2_gp_target_adapter< 32 > memory_REG_adapter;                 //%
                                                                                //%
public:                                                                         //%
	// Process declarations                                                 //%
	void                                                                    //%
	INTRHandler1();                                                         //%
                                                                                //%
protected:                                                                      //%
	// Memory callback declarations                                         //%
	void                                                                    //%
	input_callback(                                                         //%
		tlm::tlm_generic_payload& trans, sc_core::sc_time& t);          //%
	// support for message logging                                          //%
	void initMessageLogging();                                              //%
	void REPORT_MSG(std::string sev, std::string msg);                      //%
	void DBG_MSG(std::string msg)   { REPORT_MSG("debug",msg); }            //%
	void WARN_MSG(std::string msg)  { REPORT_MSG("warn",msg); }             //%
	void ERROR_MSG(std::string msg) { REPORT_MSG("error",msg); }            //%
	void FATAL_MSG(std::string msg) { REPORT_MSG("fatal",msg); }            //%
                                                                                //%USERBEGIN MEMBER_DECLS
    enum DbgCategories { GENERAL = 0, PORTS, REGS } ;
    bool dbgFlag[sizeof(DbgCategories)];

    // TODO: Insert declarations of member data and functions here.
    ///////  JY ////////////
    unsigned int port_num[NUM_PORT];
                                                                                //%USEREND MEMBER_DECLS
};                                                                              //%
                                                                                //%
//------------------------                                                      //%
// Module Implementation                                                        //%
//------------------------                                                      //%
                                                                                //%USERBEGIN HEADER_CPP
// TODO: Insert your includes, declarations, etc. here.
                                                                                //%USEREND HEADER_CPP
                                                                                //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
Interrupt_Controller< NUM_PORT >::Interrupt_Controller( const sc_core::sc_module_name & n)//%
		: sc_core::sc_module(n)                                         //%
,                                                                               //%
 nIRQ("nIRQ"),                                                                  //%
 nFIQ("nFIQ"),                                                                  //%
 memory("memory"),                                                              //%
 memory_REG_adapter("memory_REG_adapter", memory),                              //%
 REG("REG", 3ULL),                                                              //%
  REG_INT_MASK("REG_INT_MASK", REG, 0LL ),                                      //%
  REG_INT_TYPE("REG_INT_TYPE", REG, 1LL ),                                      //%
  REG_INT_SOURCE("REG_INT_SOURCE", REG, 2LL )                                   //%
                                                                                //%
                                                                                //%USERBEGIN INITIALIZER
    // TODO: Add your class initialization here.
                                                                                //%USEREND INITIALIZER
                                                                                //%
{                                                                               //%
 // declare processes and their sensitivities                                   //%
	SC_THREAD(INTRHandler1);                                               //%
	 for (unsigned int i = 0; i < NUM_PORT; i++) {                          //%
		sensitive << INTR[i].value_changed() ;                              //%
    
	 }                                                                      //%

	 dont_initialize();                                                     //%
                                                                            //%
	// bind target ports to memories                                        //%
	memory_REG_adapter(REG);                                                //%
                                                                                //%
 // setup memory callbacks                                                      //%
	// - Memory: REG                                                        //%
	scml2::set_callback(                                                    //%
		REG,                                                            //%
		SCML2_CALLBACK(input_callback),                                 //%
		scml2::AUTO_SYNCING);                                           //%
                                                                                //%
                                                                                //%
                                                                                //%
#ifdef SCML_COMMAND_PROCESSOR_H                                                 //%
	SCML_COMMAND_PROCESSOR(commandProcessor);                               //%
	SCML_ADD_COMMAND("debug",0,6,"debug [-+][general|regs|ports|all]", "Turn on/off debug flags");//%
#endif // SCML_COMMAND_PROCESSOR_H                                              //%
                                                                                //%
    initMessageLogging();                                                       //%
                                                                                //%USERBEGIN CONSTRUCTOR

    // TODO: Add constructor code here.
    if ( dbgFlag[GENERAL] ) DBG_MSG("Created " + (std::string)this->basename());

    cout << "interrupt constructor" << endl;

                                                                                //%USEREND CONSTRUCTOR
                                                                                //%
}                                                                               //%
// destructor                                                                   //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
Interrupt_Controller< NUM_PORT >::~Interrupt_Controller()                       //%
{                                                                               //%
                                                                                //%USERBEGIN DESTRUCTOR

    // TODO: Add destructor code here.

                                                                                //%USEREND DESTRUCTOR
}                                                                               //%
// initialization method for ports                                              //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
void                                                                            //%
Interrupt_Controller< NUM_PORT >::initPorts()                                   //%
{ 
//////// JY///////////
//	nIRQ.initialize(0x0);                                                   //%
//	nFIQ.initialize(0x0);                                                   //%

    nIRQ.initialize(0x1);
    nFIQ.initialize(0x1);

}                                                                               //%
// initialization method for registers                                          //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
void                                                                            //%
Interrupt_Controller< NUM_PORT >::initRegisters()                               //%
{                                                                               //%
    REG.initialize(0x0);                                                        //%
    REG_INT_MASK.initialize(0x0);                                               //%
    REG_INT_TYPE.initialize(0x0);                                               //%
    REG_INT_SOURCE.initialize(0x0);                                             //%
}                                                                               //%
//This method is invoked after the design is fully elaborated, but              //%
// before simulation begins.                                                    //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
void                                                                            //%
Interrupt_Controller< NUM_PORT >::end_of_elaboration()                          //%
{                                                                               //%
                                                                                //%USERBEGIN END_OF_ELAB
    // TODO: Add end_of_elaboration code here.
    this->initRegisters();
    this->initPorts();
                                                                                //%USEREND END_OF_ELAB
}                                                                               //%
// command processing method                                                    //%
//  During simulation, this command may be called to handle    /                 //%
//  interactive commands -- for dynamic instrumentation of the instance.        //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
std::string                                                                     //%
Interrupt_Controller< NUM_PORT >::commandProcessor(const std::vector< std::string >& cmd)//%
{                                                                               //%
                                                                                //%USERBEGIN CMD_PROCESSOR
    // TODO: Add commandProcessor code here.
    //  The default code generated here handles toggling off/on the
    //  default debug instrumentation flags: GENERAL, PORTS, and REGS.

    std::string command = cmd[0];
    std::ostringstream outs;

    if (command == "debug") {
        bool print_usage_flag = false;
        std::string debug_cmd;

        if ((cmd.size() == 1) || (cmd[1] == "?")) {
            print_usage_flag = true;
        } else {
            int i = 1;
            while (i < cmd.size()) {
                bool flag = true;
                if ((cmd[i] == "-") || (cmd[i] == "+")) {
                    if (cmd[i] == "-") {
                        flag = false;
                    }
                    i++;
                }
                debug_cmd = cmd[i];
                if ((debug_cmd[0] == '+') || (debug_cmd[0] == '-')) {
                    if (debug_cmd[0] == '-') {
                        flag = false;
                    }
                    debug_cmd = debug_cmd.substr(1,debug_cmd.size()-1);
                }
                if (debug_cmd == "all") {
		    for ( int jj = 0; jj<sizeof(DbgCategories); jj++ ) {
		    	dbgFlag[jj] = flag;
		    }
                } else if (debug_cmd == "general") {
                    dbgFlag[GENERAL] = flag;
                } else if (debug_cmd == "ports" || debug_cmd == "pins") {
                    dbgFlag[PORTS] = flag;
                } else if (debug_cmd == "regs") {
                    dbgFlag[REGS] = flag;
                } else {
		    DBG_MSG(std::string("ERROR: Unknown Option:") + debug_cmd);
                    print_usage_flag = true;
                    break;
                }
                i++;
            }
        }
        outs << "Current debug options:"
            << (dbgFlag[GENERAL] ? " general" : "")
            << (dbgFlag[PORTS] ? " ports" : "")
            << (dbgFlag[REGS] ? " regs" : "")
            << ((dbgFlag[GENERAL] || dbgFlag[PORTS] || dbgFlag[REGS] )? "" : " Off")
            << std::endl;
        if (print_usage_flag) {
            outs << "Usage: debug [-+][general|ports|regs|all]" << std::endl;
            outs << " Example1: 'debug -ports' toggles OFF the debug flag for ports." << std::endl;
            outs << " Example2: 'debug ports regs' toggles ON the flags for ports & registers." << std::endl;
        }
    }
    return outs.str();
                                                                                //%USEREND CMD_PROCESSOR
}                                                                               //%
                                                                                //%
// initialization method for logging messages                                   //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
                                                                                //%
void                                                                            //%
Interrupt_Controller< NUM_PORT >::initMessageLogging()                          //%
{                                                                               //%
                                                                                //%USERBEGIN MODEL_DEBUG_INIT
    // toggle on/off debugging flags
    for (int i=0;i<sizeof(DbgCategories);i++) {
#ifdef DBG_SCP_INTERRUPT_CONTROLLER
        dbgFlag[i] = true;
#else
        dbgFlag[i] = false;
#endif
    }
                                                                                //%USEREND MODEL_DEBUG_INIT
                                                                                //%
}                                                                               //%
// method for logging messages                                                  //%
template < unsigned int NUM_PORT >                                              //%
                                                                                //%
void                                                                            //%
Interrupt_Controller< NUM_PORT >::REPORT_MSG(std::string sev, std::string msg)  //%
{                                                                               //%
                                                                                //%USERBEGIN REPORT_MSG
    std::cout << sev << ": " << msg << " [" << this->basename() << "@" << sc_core::sc_time_stamp() << "]" << std::endl;
                                                                                //%USEREND REPORT_MSG
                                                                                //%
}                                                                               //%
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
void                                                                            //%
Interrupt_Controller< NUM_PORT >::INTRHandler1()                                //%
                                                                                //%USERBEGIN INTRHandler1
{
    if ( dbgFlag[PORTS] ) DBG_MSG( "INTRHandler1 invoked because of event on port INTR" );

	// TODO: INSERT code for the INTRHandler1 method here. 

    ////// JY /////////

    while(1)
    {
        if(dbgFlag[GENERAL])  cout << "Handler Start" << endl ;
        
        unsigned int selected_port_num = 0;


        for(unsigned int i=0; i<NUM_PORT; i++){
            selected_port_num +=  INTR[i].read() << i;

            //cout << "INTR[" << i << "] :" << INTR[i].read() << endl;
            //cout << "selected_port_num :" << selected_port_num << endl;

        }

        REG_INT_SOURCE = selected_port_num;

       if(dbgFlag[GENERAL])  cout << " REG_INT_MASK : " << REG_INT_MASK << endl;
       if(dbgFlag[GENERAL])  cout << " REG_INT_TYPE : " << REG_INT_TYPE << endl;
       if(dbgFlag[GENERAL])  cout << " REG_INT_SOURCE : " << REG_INT_SOURCE << endl;
            
        if((REG_INT_SOURCE & REG_INT_MASK)){
    
            if((REG_INT_SOURCE & REG_INT_TYPE))               // INT_TYPE = 1 (FIQ), INT_TYPE = 0 (IRQ) 
                nFIQ.write(0);	
            else
                nIRQ.write(0);

        }else{
            nFIQ.write(1);
            nIRQ.write(1);
            if(dbgFlag[GENERAL])    cout << "The selected port is masked !!!" << endl;
        }
        
        wait(SC_ZERO_TIME);

        //cout << "\tnFIQ : nIRQ = " << nFIQ.read() << " : " << nIRQ.read() << endl;
        
       wait();
   }
}
                                                                                //%USEREND INTRHandler1
                                                                                //%
template < unsigned int NUM_PORT >                                              //%
void                                                                            //%
Interrupt_Controller< NUM_PORT >::input_callback(                               //%
		tlm::tlm_generic_payload& trans, sc_core::sc_time& t)           //%
{                                                                               //%
    const char* dbgMsgText = "TRANSPORT handler for memory REG";                //%
    scml2::memory< unsigned int >& m = this->REG;                               //%
    tlm::tlm_command cmd = trans.get_command();                                 //%
    sc_dt::uint64 adr = trans.get_address();                                    //%
    unsigned char* ptr = trans.get_data_ptr();                                  //%
    unsigned int len = trans.get_data_length();                                 //%
    unsigned char* byt = trans.get_byte_enable_ptr();                           //%
    unsigned int wid = trans.get_streaming_width();                             //%
                                                                                //%USERBEGIN input_callback
    if ( dbgFlag[REGS] ) DBG_MSG( dbgMsgText );
    // TODO: INSERT code for the input_callback method here.

    if (byt) { // Target unable to support byte enable attribute
        trans.set_response_status( tlm::TLM_BYTE_ENABLE_ERROR_RESPONSE );
        return;
    }
    if (wid < len) { // Target unable to support streaming width attribute
        trans.set_response_status( tlm::TLM_BURST_ERROR_RESPONSE );
        return;
    }

    if (cmd == tlm::TLM_WRITE_COMMAND) { // Execute command
        // copy from 'ptr' to your target's memory.  e.g.: memcpy(&mem[adr], ptr, num_bytes);

       if(dbgFlag[GENERAL])  cout << "WriteCommnad" << endl;
        
        unsigned int iTemp;
        unsigned int iStartAddr = adr;
        unsigned int *ptr_int = (unsigned int *)ptr;
        
       // cout << "addr   : " << adr << endl;
       // cout << "length   : " <<len << endl;
        
        for(int i=0; i<len/4; i++){
            memcpy(&iTemp, &(ptr_int[i]), sizeof(int));
            m[iStartAddr + i] = iTemp;

            //cout << "m[i] : " << m[iStartAddr +i]  << endl;
            //cout <<  "iStartAddr : " << iStartAddr << endl;
        }

        printf("\n");       

        //cout << " REG_INT_MASK : " << REG_INT_MASK << endl;
        //cout << " REG_INT_TYPE : " << REG_INT_TYPE << endl;
        //cout << " REG_INT_SOURCE : " << REG_INT_SOURCE << endl ;


    } else if (cmd == tlm::TLM_READ_COMMAND) {
        // copy from your target's mmememory to 'ptr', e.g.: memcpy(ptr, &mem[adr], num_bytes);

    }
    trans.set_response_status( tlm::TLM_OK_RESPONSE ); // Successful completion
    
   if(dbgFlag[GENERAL]) cout << "call_back_completed" << endl;
                                                                                //%USEREND input_callback
}                                                                               //%
                                                                                //%
                                                                                //%USERBEGIN MEMBER_DEFNS
// TODO: Insert definitions of your member functions, etc. here.
                                                                                //%USEREND MEMBER_DEFNS
                                                                                //%
                                                                                //%
//----------------------------------------------------------------------        //%
// 'Orphaned' code section                                                      //%
//                                                                              //%
// This section contains code snippets saved from previous versions of          //%
// the model because they may have been user-written and they could             //%
// not be associated with any tagged code sections when the                     //%
// code was re-generated.                                                       //%
//                                                                              //%
// The most likely reason for this is that before the code was                  //%
// re-generated, a function name was changed. Now, the section of code          //%
// that was associated with the old name cannot be re-associated with           //%
// the new name.  In that case, the recommended course of actions is            //%
// to simply copy the relevant lines out of this section back into the          //%
// function whose name has been changed.                                        //%
#ifdef ORPHANED_CODE                                                            //%
                                                                                //%USERBEGIN ORPHANED_CODE

//% begin section previously tagged: FOOTER_H

//% end section previously tagged: FOOTER_H
//% begin section previously tagged: FOOTER_H

//% end section previously tagged: FOOTER_H
//% begin section previously tagged: FOOTER_H

//% end section previously tagged: FOOTER_H
//% begin section previously tagged: FOOTER_H

//% end section previously tagged: FOOTER_H
//% begin section previously tagged: FOOTER_H

//% end section previously tagged: FOOTER_H
                                                                                //%USEREND ORPHANED_CODE
#endif // ORPHANED_CODE                                                         //%
                                                                                //%USERBEGIN FOOTER_H

                                                                                //%USEREND FOOTER_H
#endif // __INTERRUPT_CONTROLLER_H__                                            //%
